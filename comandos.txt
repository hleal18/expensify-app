Instalar live-server desde npm:
npm install -g liver-server
Iniciar live-server:
live-server public
Instalar babel:
npm install -g babel-cli@6.24.1
Iniciar babel con presets:
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

Se desinstalan las dependencias globales debido a las graves implicaciones que conlleva.
1. No se enlistan en el package.json (ejemplo: babel cli y live-server)
lo cual dificulta la colaboración.
2. Si se tuvieran más proyectos que usan React, implicaría que todos ellos tienen que usar
las mismas versiones que fueron instaladas, lo cual no es correcto.

Se procede a desinstalar las mencionadas del ambiente global.
-- yarn global remove babel-cli live-server

Se instalan ahora localmente.
npm install babel-cli@6.24.1 live-server

Tener en cuenta que ahora no son accesibles desde el cmd. Comandos como babel... y live-server...
ya no estan disponibles.
Se definen scripts en el package.json

Se instala webpack localmente
-- yarn add webpack@3.1.0
Se requiere proveer un archivo de configuración.

Webpack se encarga de realizar el trabajo que hacía babel.
Se configura scripts para el webpack y un archivo config.

Se instala como ejemplo el modulo validator por npm. version 8.0.0
Se accede a él importandolo en app.js como:
import validator from 'validator';
es suficiente con poner el nombre ya que se sabe que buscará
un módulo instalado.

Luego se instala React por medio del npm.
Se instala también ReactDOM por medio del npm.
npm install react@16.0.0 react-dom@16.0.0

Hay que instalar dependencias para ejecutar babel a través del
webpack. Se hacen localmente.
1. babel-core@6.25.0 : permite correr babel desde herramientas como
webpack.
2. babel-loader@7.1.1 : es un plugin de webpack. Le indica a webpack como
ejecutar babel.
Se completan las configuraciones del webpack y babelrc.

Se observa que con un simple instruccions jsx el archivo generado, bundle.js
genera una cantidad exagerada de código (20000 líneas).
Al usar webpack para producción mucho de ese código, no estará.

Se instala un nuevo plugin, babel-plugin-transform-class-properties
Permite usar sintaxis es6 para definir propiedades de clases y traducirlo a es6.
npm install babel-plugin-transform-class-properties
se configura babelrc agregando una nueva propiedad, plugins con "transform-class-properties"

se instala react-modal. Un componente de terceros.

se comienza con estilizar el código a través de webpack.
se define una nueva regla para cada archivo que contenga css.
ahora se buscan los loader.
se instala css-loader. Permite a webpack cargar el css y convertirlo a un javascript.
se instala style-loader. permite el css que esta en javascript y lo inyecta al DOM, para que se muestre
en el navegador.
se busca otro modulo para scss y que lo compile a css.
se agrega un nuevo loader.
se modifica el test para que sea scss.
se instalan dos nuevas herramientas:
sass-loader
node-sass (es el que lo convierte en css)
solo se agrega el loader de sass-loader, el implícitamente usará node-sass.

se estan aplicando estilos en el navegador, lo cual implica que puedan haber situaciones
inesperadas con navegadores diferentes. Para ello se requieren de los resets.
se instala el paquete normalize-css

se agrega el paquete react-router-dom@4.2.2
y se importa la nueva libreria en app.js
se configura el devserver, para que cada vez que haya un cambio
a otra página, se corra el index.html y la nueva librería, se encargue de decidir
que componente es el que se debe renderizar, debido a que si no se hace, el navegador
por defecto hará solicitudes al servidor para esa página que está en otra ruta, generando
un error debido a que no se encuentra.
Esta nueva instrucción agregada al dev-server, le indica al servidor que el routing
se hará en el lado del cliente.
Aparece un nuevo aviso al reiniciar el dev-server:
404s will fallback to /index.html (lo cual es lo que se quería).

Se muestran los beneficios de usar redux con respecto a aplicaciones complejas
que requiere manejar estados y cambios de datos.
Para ello reduzx usa un contenedor global de estados, de forma que los componentes
definidos sean realmente reutilizables y no haya mucho acoplamiento entre los
componentes. También para un componente padre no se vea en la necesidad de pasar
muchos props a un componente hijo. Además pueden haber situaciones donde no haya
un componente padre fácilmente visualizable por lo cual el control de los estados
no puede ser asignado a un componente común y corriente.
El paso de propiedades es altamente útil y seguirá sirviendo si la relación
de uso es directa, es decir, no se pasan props a componentes intermediarios para que
uno más lejano sea el que lo usa.
¿Dónde guarda el estado de la app?
¿Cómo crear componentes altamente reutilizables?

Se procede a instalar Redux.

Para la generación automática de IDs, se usa la librería UUID.
npm install UUID.

Para usar el spread operator en objetos, hay que configurar babel, para que funcione correcta - 
mente.
npm install babel-plugin-transform-object-rest-spread

Para el enlace de los componentes react y el store de redux se usa la librería react-redux@5.0.5

Se usa una libreria third-party para los dates. Se llama moment.js (manipular fechas)
Tambien se consultan los react-dates de airbnb (datepicker)
npm install moment@2.18.1 react-dates@12.7.0
Hay un ultimo paquete, una dependencia que usa react-dates.
npm install react-addons-shallow-compare@15.6.0

Se comienza la sección para las unit test automáticas, para ello se usa Jest.
Se instala jest.
npm install jest@20.0.4
se usa mayormente desde el cli mediante scripts.

Para el testeo de los componentes y su renderización se instala react-test-renderer@16.0.0

Debido a la gran simplicidad de la libreria anterior, se importará otra que se apoya sobre la dicha 
anteriormente, solo que añade funcionalidades que se adaptan mejor a requisitos de testeo más complejos.
la libreria es
npm install enzyme@3.0.0
En esta version se requieren otros add-ons para que funcione correctamente.
El adaptador le permite especificar la version de react a testear, lo que la hace más liviana.
enzyme-adapter-react-16@1.0.0
Tambien otro modulo requerido, es provisto por el navegador, pero en caso de no poseerlo puede
causar problemas. request animation frame
raf@3.3.2
npm install enzyme@3.0.0 enzyme-adapter-react-16@1.0.0 raf@3.3.2
Para la correcta configuracion de Enzyme con el adaptador mismo se crea en la carpeta test el fichero
setupTests.js con la configuración (tres líneas de código).
Luego, se realiza otro fichero que le dice al jest que el anterior creado (setupTests.js) debe ejecutarse
en conjunto con las pruebas para que todo funcione correctamente.
Se reconfigura el script en la configuracion de los paquetes.

Al abordar el manejo de repositorios git y entrar en detalles para subir repositorios en github
se habla del ssh key. Permite una comunicación segura. Se corren los siguientes comandos para comprobar
si en la pc se encuentra una ssh key y de igual forma, como 'asignar una'.
El ssh key permite que se suban datos a un repositorio sin necesidad de proveer el username y password
cada vez que se requiera.
https://help.github.com/articles/connecting-to-github-with-ssh/
Se debe hacer desde el git bash.
Para comprobar si hay:
ls -al ~/.ssh
Para generar uuno de tipo rsa, bits, comentario: email
ssh-keygen -t rsa -b 4096 -C "humberto.adolfo@hotmail.com"
Las opciones se eligen por defecto.
Se generan uno publico y otro privado.
Se usa el ssh-agent
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
Seguir las instrucciones
https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/
Luego de configurar la ssh key en github. Se prueba si es correcta la configuración.
Se usa:
ssh -T git@github.com
Se le da a yes.
Se sube a github mediante la dirección ssh.
Despues de configurar el origin.
-u asocia el codigo local con el flujo de subida de github.
git push -u origin master

Para desplegar la aplicación en heroku se instala el cli desde la página.
Se corren los siguientes comandos para comprobar la versión, iniciar sesión
y subir la app.
heroku --version
heroku create expensify-app-18 **Poner el nombre de la app**
Esto crea la página y tambien pone un nuevo repo git remoto.
Hay que indicarle como manejar la app (el express).
Se agrega un start script para heroku server.
Se le debe indicar como ejecutar webpack.
heroku-postbuild : "npm run build:prod"
Se modifica el gitignore.
Se pushea el proyecto a el repo remote de heroku

Se abordan las dependencias innecesarias que instala heroku.
enzyme, jest, liver-server...
Se van a crear diferentes secciones de dependencias.
Se usa el cmd
npm install chalk --dev
Instala chalk como una dependencia de desarrollo
En package se observa que se agrega en la sección devDependencies.
Chalk es solo de ejemplo.
Se pasan enzyme y enzyme to json a la nueva sección.
jest
Se borran los node_modules y se instalan con
npm install --production
para especificar solamente lo necesario para producción.
Luego de comprobar la diferencia,se instala de nuevo todo.
Se suben los cambios a github y a heroku.

Workflow para un nuevo feature al querer desplegar las nuevas características.
Se comprueban los test.
Se realiza la modificación a los componentes a renderizar.
Se comprueban los test y se actualizan si es necesario.
Se importan una libreria para formatear monedas. numeralJS.
Se realiza una nueva modificación al componente.
Se actualizan las pruebas.

Se va a proceder a usar los servicios de firebase.
Realizar el registro.
Ir al docs.
Se va a trabajar con la base de datos y el Auth.
La base de datos tiene un inciso Rules que define
quien escribe o consulta la base de datos.
Allí, ambas opciones se definen como true. Son públicas, no requiere autenticación
para leer oe scribir en ellas, es una opción momentánea.

Para montar un servidor de testeo, se montaran alli datos como los fixtures que sirvan
de insumo para comprobar que la escritura y lectura con el servicio estan funcionando.
Se debe configurar firebase para indicar si el proceso a realizar es en producción o desarrollo.
El problema por el cual se ahonda esta alternativa es que cada vez que se ejecutan las pruebas,
se escriben datos de ejemplo en la BD que se supone va a contener datos de usuario, lo cual no
no es para nada viable.
Se busca aprovechar una variable del entorno NODE_ENV para indicar si esta en prod o dev.
Debido a que la configuracion del script que se pretende modificar no tiene una sola implementación
compatible con todos los OS, se instala el modulo cross-env.
npm install --dev cross-env@5.0.5
Se instala en modo desarrollador.
Se cambia el script test para que use cross-env y acceda a la variable de ambiente NODE_ENV con el string
'test'
Webpack se beneficiará del valor de esta variable y de acuerdo al valor, tomará una configuración 
de firebase u otra.
Debido a que el contenido del script para conectarse con firebase es privado, se harán en un archivo a parte
en conjunto con gitignore para que no hagan parte de futuros commits y se exporte solo lo que se necesite
y evitar mostrar datos críticos para el ámbito de producción de la app.
Los archivos son.env.test y .env.development.
Se crean variables de ambiente en cada uno de esos archivos correspondiendo a los datos para acceder a firebase.
En el env.test, se conectará a una bd que hará parte de otro proyecto. Solo será dedicada para valores de testeo.
Se busca leer los datos de las variables desde el webpack config.
Para facilidad de uso de la tarea anterior se instala un modulo nuevo,
npm install dotenv@4.0.0
Despues de configurar las variables de entorno en webpack config y firebase.js
hay que agrega una instruccion extra a jestconfig en setupFiles.

Se hicieron configuraciones cuando es development y test, para que heroku (production) logre aprovechar las operaciones
de firebase, hay que manipular sus propias variables de ambiente que ofrece el mismo heroku cli.
Se corren una serie de comandos que permiten observar el estado y configuración de heroku.
heroku config
Si no hay, se agrega una configuración.
heroku config:set KEY=value
Crea una variable de ambiente en heroku.
heroku config
Ahora muestra la variable de ambiente.
heroku config:unset KEY
Quita la env variable.
Se usan las mismas variables de ambiente que hay en .env.development manualmente en el cli.
heroku config:set FIREBASE_API_KEY=AIzaSyAnzmR-ZDXfUUI3YH1-IR6OPWtpt6RsXWY FIREBASE_AUTH_DOMAIN=expensify-50a5f.firebaseapp.com FIREBASE_DATABASE_URL=https://expensify-50a5f.firebaseio.com FIREBASE_PROJECT_ID=expensify-50a5f FIREBASE_STORAGE_BUCKET=expensify-50a5f.appspot.com FIREBASE_MESSAGING_SENDER_ID=359905664699
Para establecer conexión con el repositorio git de heroku desde una nueva pc: heroku git:remote -a expensify-app-18

Se busca el servicio de authetication en firebase, presenta diferentes métodos.
Con cuenta google, facebook, telefono email/password, etc...